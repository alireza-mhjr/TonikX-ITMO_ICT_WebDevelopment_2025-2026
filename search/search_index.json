{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f 5 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0441\u0435\u0442\u0435\u0432\u043e\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e: UDP, TCP, HTTP, \u0447\u0430\u0442, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 GET/POST. \u0426\u0435\u043b\u044c \u2014 \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 socket, \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 HTTP.</p>"},{"location":"#_2","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u2014 UDP Hello \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u2014 TCP + \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u2014 HTTP + index.html \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u2014 \u0427\u0430\u0442 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u2014 \u0412\u0435\u0431-\u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a (GET/POST)</p>"},{"location":"conclusion/","title":"Conclusion","text":"<p>\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0451\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0435\u0442\u0435\u0432\u044b\u043c\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0432 Python.</p> <p>\u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b: - \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 UDP (\u043e\u0431\u043c\u0435\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u0431\u0435\u0437 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f)- \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 TCP \u0441 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439- HTTP-\u0441\u0435\u0440\u0432\u0435\u0440, \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 index.html- \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e- \u0432\u0435\u0431-\u0436\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 GET \u0438 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435.</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u0430:- \u043f\u043e\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 UDP \u0438 TCP;- \u043e\u0441\u0432\u043e\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432\u0440\u0443\u0447\u043d\u0443\u044e;- \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0432 Python;- \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u043e \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b.</p>"},{"location":"task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440","text":""},{"location":"task1/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"task1/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP</li> </ul>"},{"location":"task1/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ol> <p><code>bash    python server_udp.py</code></p> <ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</li> </ol> <p><code>bash    python client_udp.py</code></p>"},{"location":"task1/#server","title":"server","text":""},{"location":"task1/#server-code","title":"server code","text":"<pre><code>import socket\n\nHOST = \"127.0.0.1\"\nPORT = 14900\nBUFFER_SIZE = 1024\n\nprint(\"SERVER IS RUNNING ...\\n\")\n\nconn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nconn.bind((HOST, PORT))\n\nrequest, client_address = conn.recvfrom(BUFFER_SIZE)\n\nprint(f\"NEW CONNECTION FROM: {client_address}\\n\")\n\nprint(\"\\n\" + \"=\" * 100 + \"\\n\")\nprint(\"REQUEST FROM CLIENT: \\n\" + request.decode() + \"\\n\")\n\nconn.sendto(\"HELLO, CLIENT!\".encode(), client_address)\n</code></pre>"},{"location":"task1/#server-output","title":"server output","text":""},{"location":"task1/#client","title":"client","text":""},{"location":"task1/#client-code","title":"client code","text":"<pre><code>import socket\n\nHOST = \"127.0.0.1\"\nPORT = 14900\nBUFFER_SIZE = 1024\n\n\nconn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nconn.connect((HOST, PORT))\n\nprint(\"SENDING A REQUEST TO THE SERVER ...\")\n\nconn.send(b\"HELLO, SERVER!\")\n\nresponse = conn.recv(BUFFER_SIZE).decode()\n\n\nprint(\"\\n\" + \"=\" * 80 + \"\\n\")\nprint(f\"RESPONSE FROM SERVER:\\n{response}\\n\\n\")\n\n# conn.close()\n\n</code></pre>"},{"location":"task1/#client-output","title":"Client Output","text":""},{"location":"task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439","text":""},{"location":"task2/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:</p> <p>\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.</p>"},{"location":"task2/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP</li> </ul>"},{"location":"task2/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:    <code>bash    python server.py</code></li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:    <code>bash    python client.py</code></li> </ol>"},{"location":"task2/#server","title":"server","text":""},{"location":"task2/#server-code","title":"server code","text":"<pre><code>import socket\nimport time\n\nHOST = \"127.0.0.1\"\nPORT = 14900\nBUFFER_SIZE = 1024\nIPv4 = socket.AF_INET\nTCP = socket.SOCK_STREAM\n\n\ndef pythagorean_theorem(operands):\n    a, b = operands\n    a = float(a)\n    b = float(b)\n    return str((a * a + b * b) ** 0.5)\n\n\ndef quadratic_equation(operands):\n    a, b, c = map(float, operands)\n    delta = b * b - 4 * a * c\n    if delta &lt; 0:\n        return \"The equation has no real root.\"\n    elif delta == 0:\n        return str(-b / (2 * a))\n    else:\n        x1 = (-b + delta**0.5) / (2 * a)\n        x2 = (-b - delta**0.5) / (2 * a)\n        return f\"x1 = {x1}\\t,\\tx2 = {x2}\"\n\n\ndef trapezoid(operands):\n    a, b, h = map(float, operands)\n    s = (a + b) * h / 2\n    return str(s)\n\n\ndef parallelogram(operands):\n    a, h = map(float, operands)\n    return str(a * h)\n\n\ndef handle_request(req):\n\n    operation_str, operands_str = req.split(\";\", 1)\n    operation = int(operation_str)\n    operands = operands_str.split(\",\")\n\n    match operation:\n        case 1:\n            return pythagorean_theorem(operands)\n        case 2:\n            return quadratic_equation(operands)\n        case 3:\n            return trapezoid(operands)\n        case 4:\n            return parallelogram(operands)\n\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((HOST, PORT))\n    server_socket.listen(10)\n    server_socket.setblocking(False)\n\n    print(f\"Server started on {HOST}:{PORT}\")\n    print(\"Press Ctrl+C to stop the server\\n\")\n\n    try:\n        while True:\n\n            client_socket = None\n            client_address = None\n\n            try:\n                client_socket, client_address = server_socket.accept()\n                client_socket.setblocking(False)\n                print(f\"New connection from {client_address}\")\n\n                try:\n                    data = client_socket.recv(BUFFER_SIZE)\n                    if data:\n                        response = handle_request(data.decode(\"utf-8\"))\n                        client_socket.send(response.encode())\n                        print(f\"\\033[92mResponse sent to {client_address}\\033[0m\")\n\n                except BlockingIOError:\n                    print(f\"No data from {client_address}\")\n                except Exception as e:\n                    print(f\"Error processing {client_address}: {e}\")\n\n                finally:\n                    client_socket.close()\n                    print(f\"\\033[91mConnection {client_address} closed\\033[0m \\n\")\n\n            except BlockingIOError:\n                time.sleep(0.1)\n                continue\n\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n                if client_socket:\n                    client_socket.close()\n\n    except KeyboardInterrupt:\n        print(\"\\nServer is shutting down...\")\n    finally:\n        server_socket.close()\n        print(\"SERVER STOPPED.\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre>"},{"location":"task2/#server-output","title":"server output","text":""},{"location":"task2/#client","title":"client","text":""},{"location":"task2/#client-code","title":"client code","text":"<pre><code>import socket\nimport sys\n\nHOST = \"127.0.0.1\"\nPORT = 14900\nBUFFER_SIZE = 1024\nIPv4 = socket.AF_INET\nTCP = socket.SOCK_STREAM\n\nOPERATIONS = {\n    1: \"Pythagorean theorem\",\n    2: \"Quadratic equation\",\n    3: \"Area of a trapezoid\",\n    4: \"Area of a parallelogram\",\n    5: \"Exit program\",\n}\n\n\ndef show_menu():\n    print(\"\\n\" + \"=\" * 40)\n    print(\"MATH CALCULATOR CLIENT\")\n    print(\"=\" * 40)\n    for key, value in OPERATIONS.items():\n        print(f\"{key}. {value}\")\n    print(\"=\" * 40)\n\n\ndef get_valid_input(prompt, must_be_positive=False):\n    while True:\n        try:\n            value = float(input(prompt))\n            if must_be_positive and value &lt;= 0:\n                print(\"\\033[91mInput must be greater than zero!\\033[0m\")\n                continue\n            return value\n        except ValueError:\n            print(\"\\033[91mPlease enter a valid number!\\033[0m\")\n\n\ndef get_user_operation():\n    while True:\n        show_menu()\n        try:\n            choice = int(input(\"Please enter the operation number (1-5):\\n&gt; \"))\n            if 1 &lt;= choice &lt;= 5:\n                return choice\n            else:\n                print(\"\\033[91mPlease enter a number between 1 and 5!\\033[0m\")\n        except ValueError:\n            print(\"\\033[91mInvalid input! Please enter a number.\\033[0m\")\n\n\ndef get_pythagorean_operands():\n    print(f\"\\nYour choice: {OPERATIONS[1]} (a\u00b2 + b\u00b2 = c\u00b2)\")\n    a = get_valid_input('Enter value of \"a\": ', must_be_positive=True)\n    b = get_valid_input('Enter value of \"b\": ', must_be_positive=True)\n    return [a, b]\n\n\ndef get_quadratic_operands():\n    print(f\"\\nYour choice: {OPERATIONS[2]} (ax\u00b2 + bx + c = 0)\")\n    a = get_valid_input('Enter value of \"a\": ')\n    b = get_valid_input('Enter value of \"b\": ')\n    c = get_valid_input('Enter value of \"c\": ')\n    return [a, b, c]\n\n\ndef get_trapezoid_operands():\n    print(f\"\\nYour choice: {OPERATIONS[3]} (((a + b) \u00d7 h) / 2)\")\n    base1 = get_valid_input('Enter length of base \"a\": ', must_be_positive=True)\n    base2 = get_valid_input('Enter length of base \"b\": ', must_be_positive=True)\n    height = get_valid_input('Enter height \"h\": ', must_be_positive=True)\n    return [base1, base2, height]\n\n\ndef get_parallelogram_operands():\n    print(f\"\\nYour choice: {OPERATIONS[4]} (base \u00d7 height)\")\n    base = get_valid_input(\"Enter length of base: \", must_be_positive=True)\n    height = get_valid_input(\"Enter height: \", must_be_positive=True)\n    return [base, height]\n\n\ndef get_operands(operation):\n    match operation:\n        case 1:\n            return get_pythagorean_operands()\n        case 2:\n            return get_quadratic_operands()\n        case 3:\n            return get_trapezoid_operands()\n        case 4:\n            return get_parallelogram_operands()\n        case 5:\n            print(\"Goodbye!\")\n            sys.exit(0)\n\n\ndef send_to_server(operation, operands):\n    try:\n        conn = socket.socket(IPv4, TCP)\n        conn.connect((HOST, PORT))\n\n        # Send operation and operands\n        data = f\"{operation};{','.join(map(str, operands))}\"\n        conn.send(data.encode())\n\n        # Receive result\n        result = conn.recv(BUFFER_SIZE).decode()\n        print(f\"\\nResult: {result}\")\n\n    except ConnectionRefusedError:\n        print(\n            \"\\033[91mCould not connect to server. Make sure server is running.\\033[0m\"\n        )\n    except Exception as e:\n        print(f\"\\033[91mError communicating with server: {e}\\033[0m\")\n\n\ndef run_client():\n    print(\"Connecting to math calculator server...\")\n\n    while True:\n        try:\n            operation = get_user_operation()\n            operands = get_operands(operation)\n\n            if operation != 5:  # Don't send exit command to server\n                send_to_server(operation, operands)\n\n                # Ask if user wants to continue\n                continue_calc = input(\n                    \"\\nDo you want to continue? (y(by defualt)/n): \"\n                ).lower()\n                if continue_calc not in [\"y\", \"yes\", \"\"]:\n                    print(\"Thank you for using the calculator!\")\n                    break\n\n        except KeyboardInterrupt:\n            print(\"\\n\\nInterrupted by user. Goodbye!\")\n            break\n        except Exception as e:\n            print(f\"\\033[91mUnexpected error: {e}\\033[0m\")\n\n\nif __name__ == \"__main__\":\n    run_client()\n\n\n</code></pre>"},{"location":"task2/#client-output","title":"Client Output","text":""},{"location":"task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","text":""},{"location":"task3/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p>"},{"location":"task3/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP</li> </ul>"},{"location":"task3/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>index.html</code> \u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:    <code>bash    python server_webpage_tcp.py</code></li> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:    <code>bash    http://127.0.0.1:8080/</code></li> </ol>"},{"location":"task3/#server","title":"server","text":""},{"location":"task3/#server-code","title":"server code","text":"<pre><code>import socket\nimport time\n\nHOST = \"localhost\"\nPORT = 8080\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nserver_socket.bind((HOST, PORT))\nserver_socket.setblocking(False)\n\nserver_socket.listen(5)\nprint(f\"HTTP server started on {HOST}:{PORT}...\")\n\ntry:\n    while True:\n        try:\n            client_connection, client_address = server_socket.accept()\n            client_connection.setblocking(False)\n            print(f\"New connection from {client_address}\")\n\n            request = client_connection.recv(1024).decode()\n            # print(request)\n\n            f = open(\n                \"C:/Users/Zia-pc/Desktop/first_lab_web/task3/index.html\",\n                \"r\",\n                encoding=\"utf-8\",\n            )\n            html_content = f.read()\n            f.close()\n            content = html_content.encode(\"utf-8\")\n            http_response = (\n                \"HTTP/1.1 200 OK\\r\\n\"\n                \"Content-Type: text/html; charset=UTF-8\\r\\n\"\n                f\"Content-Length: {len(content)}\\r\\n\"\n                \"Connection: close\\r\\n\"\n                \"\\r\\n\"\n            ).encode(\"utf-8\") + content\n\n            # print(\"\\n\", \"=\" * 100, \"\\n\")\n            # print(f\"response from server :\\n {http_response}\\n\\n\")\n\n            client_connection.send(http_response)\n            print(f\"\\033[92mHTML page sent to {client_address}\\033[0m\")\n            client_connection.close()\n            print(f\"\\033[91mConnection {client_address} closed\\033[0m \\n\")\n        except BlockingIOError:\n            time.sleep(0.1)\n            continue\nexcept KeyboardInterrupt:\n    print(\"\\nServer is shutting down...\")\nfinally:\n    server_socket.close()\n    print(\"SERVER STOPPED.\")\n\n</code></pre>"},{"location":"task3/#server-output","title":"server output","text":""},{"location":"task3/#client","title":"client","text":""},{"location":"task3/#client-output","title":"Client Output","text":""},{"location":"task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442","text":""},{"location":"task4/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p>"},{"location":"task4/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: socket, threading</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP</li> </ul>"},{"location":"task4/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:    <code>bash    python server1.py</code></li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445:    <code>bash    python client1.py</code></li> </ol>"},{"location":"task4/#server","title":"server","text":""},{"location":"task4/#server-code","title":"server code","text":"<pre><code>import socket\nimport threading\n\nclients = []\nusernames = []\nshutdown_event = threading.Event()\n\n\ndef start_server(host=\"localhost\", port=14900):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.settimeout(1)\n    server_socket.bind((host, port))\n    server_socket.listen()\n\n    print(f\"The server is running on {host}:{port}\")\n    print(\"Press Ctrl+C to stop the server\")\n\n    try:\n        while not shutdown_event.is_set():\n            try:\n                client_socket, address = server_socket.accept()\n                print(f\"Connection from {address}\")\n\n                client_socket.send(\"USERNAME\".encode(\"utf-8\"))\n                username = client_socket.recv(1024).decode(\"utf-8\")\n\n                usernames.append(username)\n                clients.append(client_socket)\n\n                print(f\"Username of new client: {username}\")\n\n                broadcast_message(\n                    f\"{username} joined the chat!\", sender_client=client_socket\n                )\n\n                thread = threading.Thread(\n                    target=handle_client, args=(client_socket, username)\n                )\n                thread.daemon = True\n                thread.start()\n            except socket.timeout:\n                continue\n    except KeyboardInterrupt:\n        print(\"\\nServer is shutting down...\")\n        shutdown_event.set()\n\n        for client in clients:\n            try:\n                client.close()\n            except:\n                pass\n        server_socket.close()\n\n\ndef broadcast_message(message, sender_client=None):\n    for client in clients:\n        if client != sender_client:\n            try:\n                client.send(message.encode(\"utf-8\"))\n            except:\n                remove_client(client)\n\n\ndef handle_client(client_socket, username):\n    while not shutdown_event.is_set():\n        try:\n            client_socket.settimeout(1)\n            message = client_socket.recv(1024).decode(\"utf-8\")\n            if message:\n                formatted_message = f\"{username}: {message}\"\n                print(f\"Received: {formatted_message}\")\n                broadcast_message(formatted_message, sender_client=client_socket)\n            else:\n                remove_client(client_socket)\n                break\n        except socket.timeout:\n            continue\n        except:\n            remove_client(client_socket)\n            break\n\n    try:\n        client_socket.close()\n    except:\n        pass\n\n\ndef remove_client(client_socket):\n    if client_socket in clients:\n        index = clients.index(client_socket)\n        username = usernames[index]\n\n        clients.remove(client_socket)\n        usernames.remove(username)\n\n        broadcast_message(f\"{username} left the chat\")\n        client_socket.close()\n        print(f\"{username} disconnected\")\n\n\nif __name__ == \"__main__\":\n    start_server()\n\n\n</code></pre>"},{"location":"task4/#server-output","title":"server output","text":""},{"location":"task4/#client","title":"client","text":""},{"location":"task4/#client-code","title":"client code","text":"<pre><code>import socket\nimport threading\nimport sys\nimport time\n\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode(\"utf-8\")\n            print(f\"\\r{message}\\n{username}: \", end=\"\", flush=True)\n        except:\n            print(\"\\rThe connection is broken!\")\n            client_socket.close()\n            break\n\n\ndef start_client(host=\"localhost\", port=14900):\n    global username\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        client_socket.connect((host, port))\n\n        username_request = client_socket.recv(1024).decode(\"utf-8\")\n        if username_request == \"USERNAME\":\n            username = input(\"Enter username : \")\n            client_socket.send(username.encode(\"utf-8\"))\n\n        receive_thread = threading.Thread(\n            target=receive_messages, args=(client_socket,)\n        )\n        receive_thread.daemon = True\n        receive_thread.start()\n\n        while True:\n            message = input(f\"{username}: \")\n            if message.lower() == \"quit\":\n                client_socket.close()\n                break\n            try:\n                client_socket.send(message.encode(\"utf-8\"))\n            except:\n                print(\"Error sending the message!\")\n                break\n\n    except Exception as e:\n        print(f\"Connection error: {e}\")\n    finally:\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    start_client()\n\n</code></pre>"},{"location":"task4/#client-output","title":"Client Output","text":"<p>client 1:</p> <p></p> <p>client 2:</p> <p></p>"},{"location":"task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"task5/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.</p>"},{"location":"task5/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP</li> </ul>"},{"location":"task5/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:    <code>bash    python server1.py</code></li> <li>\u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>curl</code> \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442:</li> </ol> <p><code>curl -d '{\"discipline\":\"Math\",\"mark\":\"A\"}' -H \"Content-Type: application/json\" -X POST http://127.0.0.1:14905/</code></p> <p>or</p> <p><code>bash    python client1.py</code></p> <ol> <li>\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:</li> </ol> <pre><code>http://127.0.0.1:14905/\n</code></pre>"},{"location":"task5/#server","title":"server","text":""},{"location":"task5/#server-code","title":"server code","text":"<pre><code>import socket\nimport traceback\nimport json\nimport os\n\n\nclass Request:\n    def __init__(self, method, target, version, headers, body):\n        self.method = method\n        self.target = target\n        self.version = version\n        self.headers = headers\n        self.body = body\n\n\nclass Response:\n    def __init__(self, status, reason, headers=None, body=None):\n        self.status = status\n        self.reason = reason\n        self.headers = headers or b\"\"\n        self.body = body or b\"\"\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port, coding=\"utf-8\"):\n        self.host = host\n        self.port = port\n        self.coding = coding\n        self.data_file = \"task5/server/grades.json\"\n        self.sock = None  # \u0646\u06af\u0647 \u062f\u0627\u0634\u062a\u0646 socket \u0628\u0631\u0627\u06cc \u0628\u0633\u062a\u0647 \u0634\u062f\u0646 \u0647\u0646\u06af\u0627\u0645 Ctrl+C\n\n    def serve_forever(self):\n        self.sock = socket.socket()\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(5)\n        print(f\"Server running on {self.host}:{self.port}\")\n\n        try:\n            while True:\n                conn, addr = self.sock.accept()\n                self.serve_client(conn, addr)\n        except KeyboardInterrupt:\n            print(\"\\nServer interrupted by user. Shutting down...\")\n        finally:\n            if self.sock:\n                self.sock.close()\n\n    def serve_client(self, conn, addr):\n        print(f\"Connection from {addr}\")\n        conn.settimeout(5)\n\n        try:\n            request = self.parse_request(conn)\n            response = self.handle_request(request)\n        except Exception:\n            traceback.print_exc()\n            response = Response(400, \"Bad Request\")\n        finally:\n            self.send_response(conn, response)\n            conn.close()\n\n    def parse_request(self, conn) -&gt; Request:\n        data = conn.recv(65535)\n        if not data:\n            raise ValueError(\"empty request\")\n\n        header_data, _, body_data = data.partition(b\"\\r\\n\\r\\n\")\n        header_text = header_data.decode(self.coding, errors=\"replace\")\n\n        lines = header_text.split(\"\\r\\n\")\n        method, url, version = lines[0].split(\" \")\n\n        headers = {}\n        for line in lines[1:]:\n            if line.strip():\n                key, value = line.split(\":\", 1)\n                headers[key.strip()] = value.strip()\n\n        body = {}\n        if headers.get(\"Content-Length\"):\n            content_type = headers.get(\"Content-Type\", \"\")\n            body_text = body_data.decode(self.coding, errors=\"replace\")\n\n            if content_type.startswith(\"application/json\"):\n                body = json.loads(body_text)\n            elif content_type.startswith(\"application/x-www-form-urlencoded\"):\n                body = {}\n                for pair in body_text.split(\"&amp;\"):\n                    if \"=\" in pair:\n                        key, value = pair.split(\"=\", 1)\n                        body[key] = value.replace(\"+\", \" \")\n\n        return Request(method, url, version, headers, body)\n\n    def load_data(self):\n        if os.path.exists(self.data_file):\n            with open(self.data_file, \"r\", encoding=self.coding) as f:\n                return json.load(f)\n        return {}\n\n    def save_data(self, data: dict):\n        with open(self.data_file, \"w\", encoding=self.coding) as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n\n    def handle_request(self, request: Request) -&gt; Response:\n        if request.method == \"GET\":\n            with open(\n                \"task5/server/template_grades.html\", \"r\", encoding=self.coding\n            ) as f:\n                template = f.read()\n\n            data = self.load_data()\n            rows = \"\".join(\n                f\"&lt;tr&gt;&lt;td&gt;{d}&lt;/td&gt;&lt;td&gt;{', '.join(m)}&lt;/td&gt;&lt;/tr&gt;\\n\"\n                for d, m in data.items()\n            )\n\n            body = template.replace(\"{{rows}}\", rows).encode(self.coding)\n            headers = (\n                f\"Content-Length: {len(body)}\\r\\n\"\n                f\"Content-Type: text/html; charset={self.coding}\\r\\n\"\n            ).encode(self.coding)\n            return Response(200, \"OK\", headers, body)\n\n        elif request.method == \"POST\":\n            discipline = request.body.get(\"discipline\")\n            mark = request.body.get(\"mark\")\n            if not discipline or not mark:\n                return Response(400, \"Bad Request\")\n\n            data = self.load_data()\n            if discipline not in data:\n                data[discipline.strip()] = []\n            data[discipline].append(str(mark))\n            self.save_data(data)\n\n            headers = (\"Location: /\\r\\nContent-Length: 0\\r\\n\").encode(self.coding)\n            return Response(303, \"See Other\", headers, b\"\")\n\n        else:\n            return Response(405, \"Method Not Allowed\")\n\n    def send_response(self, conn, response: Response):\n        res_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\"\n\n        headers_text = response.headers.decode(self.coding, errors=\"ignore\")\n        if \"Content-Length\" not in headers_text:\n            headers_text += f\"Content-Length: {len(response.body)}\\r\\n\"\n        if \"Content-Type\" not in headers_text:\n            headers_text += f\"Content-Type: text/html; charset={self.coding}\\r\\n\"\n\n        full_response = (res_line + headers_text + \"\\r\\n\").encode(\n            self.coding\n        ) + response.body\n        conn.sendall(full_response)\n\n\nif __name__ == \"__main__\":\n    server = MyHTTPServer(\"localhost\", 14905)\n    server.serve_forever()\n</code></pre>"},{"location":"task5/#server-output","title":"server output","text":""},{"location":"task5/#client","title":"client","text":""},{"location":"task5/#client-code","title":"client code","text":"<pre><code>\nimport socket\nimport json\n\nHOST = \"localhost\"\nPORT = 14905\nCODING = \"utf-8\"\n\n\ndef send_post_req(discipline: str, mark: str):\n    body = json.dumps({\"discipline\": discipline, \"mark\": mark})\n    body_bytes = body.encode(CODING)\n\n    request = (\n        f\"POST / HTTP/1.1\\r\\n\"\n        f\"Host: {HOST}:{PORT}\\r\\n\"\n        f\"Content-Type: application/json\\r\\n\"\n        f\"Content-Length: {len(body_bytes)}\\r\\n\"\n        f\"Connection: close\\r\\n\"\n        f\"\\r\\n\"\n    ).encode(CODING) + body_bytes\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.connect((HOST, PORT))\n        sock.sendall(request)\n\n        response = sock.recv(4096)\n\n    return response.decode(CODING, errors=\"replace\")\n\n\nif __name__ == \"__main__\":\n    try:\n        while True:\n            discipline = input(\"\\nEnter the name of the discipline: \").strip().lower()\n            while True:\n                try:\n                    mark = float(input(\"Enter the score: \").strip())\n                    if not 0 &lt;= mark &lt;= 100:\n                        print(\n                            \"\\033[91mInput must be greater than zero and smaller than 100!\\033[0m\"\n                        )\n                        continue\n                    break\n                except ValueError:\n                    print(\"\\033[91mPlease enter a valid number!\\033[0m\")\n\n            resp = send_post_req(discipline, mark)\n            print(\"\\nServer response:\")\n            print(resp.split(\"\\r\\n\\r\\n\", 1))\n\n    except KeyboardInterrupt:\n        print(\"\\n\\nInterrupted by user. Goodbye!\")\n</code></pre>"},{"location":"task5/#client-output","title":"Client Output","text":"<p>client 1:</p> <p></p> <p>client 2:</p> <p></p>"}]}